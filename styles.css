@import url('https://fonts.googleapis.com/css2?family=Source+Serif+4:opsz,wght@8..60,200..900&display=swap');
@import url('https://fonts.googleapis.com/css2?family=EB+Garamond:ital,wght@1,600&display=swap');

@font-face {
    font-family: 'KaTeX_Main';
    src:
            url('https://cdn.jsdelivr.net/npm/katex@0.16.9/dist/fonts/KaTeX_Main-Regular.woff2') format('woff2'),
            url('https://cdn.jsdelivr.net/npm/katex@0.16.9/dist/fonts/KaTeX_Main-Regular.woff')  format('woff');
    font-weight: normal;
    font-style: normal;
}

@font-face {
    font-family: 'KaTeX_Math';
    src:
            url('https://cdn.jsdelivr.net/npm/katex@0.16.9/dist/fonts/KaTeX_Math-Italic.woff2') format('woff2'),
            url('https://cdn.jsdelivr.net/npm/katex@0.16.9/dist/fonts/KaTeX_Math-Italic.woff')  format('woff');
    font-weight: normal;
    font-style: italic;
}

@font-face {
    font-family: 'KaTeX_Size1';
    src:
            url('https://cdn.jsdelivr.net/npm/katex@0.16.9/dist/fonts/KaTeX_Size1-Regular.woff2') format('woff2'),
            url('https://cdn.jsdelivr.net/npm/katex@0.16.9/dist/fonts/KaTeX_Size1-Regular.woff')  format('woff');
    font-weight: normal;
    font-style: normal;
}

:root {
    --create-green-active:   rgba(34, 139, 34, .2);
    --create-green-inactive: rgba(34, 139, 34, .05);
    --drop-target-border-size: 2px;
    --drop-target-border: var(--drop-target-border-size) dotted dimgray;
    --separator-color: gray;
    --separator-border: 1px solid var(--separator-color);

    font-size: 18px;
    font-family: "Source Serif 4", serif;
    font-optical-sizing: auto;
    font-weight: 400;
    font-style: normal;
}

body {
    margin: 0;
    padding: 0;
}

h1, h2, h3, h4, h5, h6 {
    font-family: "EB Garamond", serif;
    font-optical-sizing: auto;
    font-weight: 600;
    font-style: italic;
}

/* Top-level expressions */
*:not(.expression, .full-binder) > .expression {
    position: relative;
}

.expression, .full-binder {
    font-family: 'KaTeX_Size1', serif;
    display: inline;
    line-height: 1.5em;
    vertical-align: middle;
    padding: 0 1px 0;
    border-radius: 4px;
    user-select: none;
    margin: 0;
    border: var(--drop-target-border-size) solid transparent;
    font-size: 1.25em;

    & & {
        font-size: inherit;
    }

    /*border: 1px solid rgba(255, 0, 0, .5);*/

    --separation-margin: 3px;

    .identifier {
        height: 1em;
    }

    &[draggable="true"], &[draggable="true"] * {
        touch-action: none;

        &:not(.grabbed) {
            cursor: grab;
        }
    }

    &[draggable="true"]:hover {
        &:not(:has(&)):not(:has(.active-drop-target)):not(:has(.full-binder:hover)) {
            background: rgba(255, 0, 0, .1);
            border-bottom: var(--drop-target-border-size) solid red;
        }
    }

    &.grabbed {
        background: rgba(255, 0, 0, .1);
        border-bottom: var(--drop-target-border-size) solid red;
        box-shadow: 0 0 5px red;
    }

    &.just-added {
        animation: added-expression .2s;

        --text-shadow: rgba(255, 255, 0, 0.2);
    }

    &.enabled-drop-target {
        background: rgba(255, 255, 0, .1);
        border: var(--drop-target-border);
    }
    &.active-drop-target:not(:has(.active-drop-target)) {
        background: yellow;
    }
}

@keyframes added-expression {
    0% {
        background: none;
        border-color: transparent;
        text-shadow: 0 0 10px rgba(0, 0, 0, 0);
        scale: 1.4;
    }
    100% {
        background: none;
        border-color: transparent;
        text-shadow: 0 0 0 rgba(0, 0, 0, .5);
        scale: 1;
    }
}

.highlight {
    animation: highlight 1s;
}

@keyframes highlight {
    0% { background: yellow; }
    50% { background: yellow; }
    100% { }
}

.enabled-drop-target {
    cursor: pointer !important;
}

.hole {
    display: inline-block;
    border: var(--drop-target-border);
    background: rgba(0, 0, 0, .2);
    min-width: .7em;
    height: 1em;
    transition: transform .2s, opacity .2s, background-color .2s;
    transform: scale(.8);
    opacity: .5;

    &.enabled-drop-target {
        background: var(--create-green-inactive);
        transform: scale(1);
        opacity: 1;

        &.active-drop-target {
            background: var(--create-green-active);
            transform: scale(1.2);
            opacity: .8;
        }
    }
}

.parenthesis {
    display: inline;
    color: rgba(0, 0, 0, .4);

    &:first-child {
        margin-left: -3px;
    }

    &:last-child {
        margin-right: -3px;
    }
}

.equality {
    > .expression {
        padding-bottom: 5px;
        padding-top: 5px;
    }
    & > .operator {
        display: inline-block;
        transform: translateY(2px);
        margin: 0 var(--separation-margin);
    }
}

.application > *:not(.parenthesis) + *:not(.parenthesis) {
    margin-left: var(--separation-margin);
}

.forall > :last-child,
.exists > :last-child {
    padding-left: 0;
}

.binder {
    color: darkgoldenrod;
}

.full-binder {
    &, & * {
        cursor: pointer !important;
    }

    &:hover {
        background: var(--create-green-inactive);
    }
    &:active {
        background: var(--create-green-active);
    }
}

.identifier {
    padding: 0;

    &.bound {
        font-family: 'KaTeX_Math', serif;
        font-style: italic;
    }

    &.free {
        font-family: 'KaTeX_Size1', serif;
        font-style: normal;
        font-weight: bold;
        color: darkslateblue;
    }

    &.highlighted {
        background-color: yellow;
    }

    sub {
        transform:
            translate(-2px, 25%)
            scale(.7);
        margin-right: -2px;
    }
}

ol.collection {
    list-style-type: none;
    padding: 0;
    margin-left: .2em;
    margin-right: .2em;

    & > li {
        display: inline;
        & + & {
            &::before {
                color: black;
                margin-right: .2em;
                content: ',';
            }

            &:last-child::before {
                margin-left: .2em;
                content: 'and';
            }
        }
    }
}

main {
    display: flex;
    flex-direction: column;
    align-items: center;
    height: 100dvh;
    overflow-y: hidden;
}

.scroll-container {
    overflow-y: auto;
    flex-grow: 1;
    align-self: stretch;
}

.logic-system, .expression-editor {
    max-width: 700px;
}

.logic-system {
    margin: 0 auto;
    padding: 1em;

    h2:first-of-type {
        margin-top: 0;
    }

    .axioms, .theorems, .theorem-steps {
        list-style-type: none;
        padding: 0;

        & > li {
            position: relative;
            display: flex;
            align-items: baseline;
            margin-left: .5em;
            margin-bottom: .2em;

            --item-name: "";

            &[id] {
                --item-name: attr(id) ".";
            }

            &::before {
                content: var(--item-name);
                margin-top: calc(3 * var(--drop-target-border-size));
                padding-right: .5em;
                align-self: start;
            }

            & > .collapse-proof-marker {
                margin-top: calc(3 * var(--drop-target-border-size));
                position: absolute;
                left: 0;
                translate: calc(-100%) 0;
                padding: 0 5px;
                cursor: pointer;

                &::before {
                    content: '▾';
                    line-height: 1em;
                    vertical-align: top;
                }
            }

            &.collapsed > .collapse-proof-marker::before {
                content: '▸';
            }
        }

        .exists-drop-target {
            position: absolute;
            line-height: 1.5em;
            top: 0;
            left: 0;
            font-size: .8em;
            font-family: 'KaTeX_Math', serif;
            border: var(--drop-target-border);
            border-radius: 4px;
            padding: 2px 2px 0;

            --displacementX: calc(-100% - 5px);
            transform: translateX(var(--displacementX));
            transform-origin: calc(var(--displacementX)/2) 50%;
            scale: 0;
            transition: scale .2s;

            &.enabled-drop-target {
                scale: 1;
                background-color: white;
                background-image: linear-gradient(
                        var(--create-green-inactive),
                        var(--create-green-inactive)
                );

                &.active-drop-target {
                    background-image: linear-gradient(
                            var(--create-green-active),
                            var(--create-green-active)
                    );
                }
            }
        }
    }

    .axioms {
        border-bottom: var(--separator-border);
        margin-bottom: 1em;
    }

    .actions {
        button + button {
            position: relative;
            margin-left: 1em;

            &::before {
                position: absolute;
                left: calc(-1em - 2px);
                top: 0;
                bottom: 0;
                content: "·";
                display: inline-block;
                width: 1em;
                text-align: center;
                align-content: center;
                scale: 2;
            }
        }
    }

    .theorems {
        .theorem-header, .new-binding {
            display: flex;
            align-items: baseline;
            flex-wrap: wrap;

            & > .expression {
                margin-left: .2em;
                margin-right: .2em;
            }
        }

        .theorem-steps {
            margin-left: 2em;
            border-left: var(--separator-border);

            & > li.theorem-header {
                min-height: 32px;
                background-color: white;
                margin-left: -2em;
            }
        }

        .theorem-reference {
            display: flex;
            flex: 1 1 0;
            justify-content: flex-end;
            align-content: center;

            &::before {
                content: " ";
                border-bottom: 1px dotted lightgray;
                flex-grow: 1;
                min-width: 10px;
                transform: translateX(-.3em);
            }

            a {
                font-size: .8em;
                text-decoration: none;
                background: rgb(from lightblue r g b / 50%);
                color: color-mix(in srgb, lightblue, black 50%);
                padding: .2em;
                border-radius: 5px;
            }
        }
    }
}

.expression-editor {
    width: min(100vw, 700px);
    border-top: var(--separator-border);
    background: white;

    &[open] {
        box-shadow: 0 -4px 4px -5px black;
        clip-path: inset(-10px 0 0 0);

        summary {
            border-bottom: var(--separator-border);
        }
    }

    summary {
        cursor: pointer;
        padding-right: 1em;

        &::marker {
            color: orange;
            line-height: 3em;
        }

        h2 {
            display: inline;

            &::after {
                content: ' ✏️ ';
            }
        }
    }

    .editor {
        display: flex;
        flex-wrap: nowrap;
    }

    .pallete {
        padding: 0 .5em;
        margin: .5em .5em .5em 0;
        max-width: 80px;
        gap: 1px 20px;
        display: flex;
        flex-wrap: wrap;
        justify-content: center;
        position: relative;

        &::before {
            background: var(--separator-color);
            content: ' ';
            width: 1px;
            position: absolute;
            right: -.5em;
            transform: translateX(50%);
            top: 0;
            bottom: 0;
        }

        & > .identifier {
            padding-left: .3em;
            padding-right: .3em;
        }

        * {
            transition: filter .2s;
        }

        .delete-expression-drop-target {
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: red;
            display: none;
            text-align: center;
            z-index: 1;

            &.enabled-drop-target {
                display: block;
                background: rgba(255, 0, 0, .05);
                border: var(--drop-target-border);
                transition: background-color .2s;
                align-content: center;

                &::after {
                    content: '♻️';
                    font-size: 2.5em;
                    opacity: .5;
                    transition: transform .1s;
                    display: block;
                }

                & ~ * {
                    filter: blur(5px);
                    transition: filter 0s;
                }

                &.active-drop-target {
                    background: rgba(255, 0, 0, 0.2);
                }
            }
        }
    }

    .canvas {
        padding: .5em 0;
        margin: .5em 0 .5em .5em;
        flex-grow: 1;
        display: flex;
        flex-direction: column;
        align-items: stretch;
        text-align: center;

        .new-expression-drop-target {
            align-self: stretch;
            text-align: center;
            flex-grow: 1;

            &.enabled-drop-target {
                background: var(--create-green-inactive);
                border: var(--drop-target-border);
                transition: background-color .2s;

                &::after {
                    content: '➕ New expression';
                    text-align: center;
                    display: block;
                    padding: .5em 0;
                    opacity: .5;
                }

                &.active-drop-target {
                    background: var(--create-green-active);
                }
            }
        }
    }
}

.hidden {
    display: none;
}
